{
    "name": "xenorchestra",
    "description": "A Pulumi package for creating and managing xenorchestra cloud resources.",
    "keywords": [
        "pulumi",
        "xenorchestra",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`xenorchestra` Terraform Provider](https://github.com/aslak11/terraform-provider-xenorchestra).",
    "repository": "https://github.com/aslak11/pulumi-xenorchestra",
    "publisher": "aslak11",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing xenorchestra cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aslak11/terraform-provider-xenorchestra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-xenorchestra` repo](https://github.com/aslak11/pulumi-xenorchestra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-xenorchestra` repo](https://github.com/aslak11/terraform-provider-xenorchestra/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aslak11/terraform-provider-xenorchestra)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-xenorchestra` repo](https://github.com/aslak11/pulumi-xenorchestra/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-xenorchestra` repo](https://github.com/aslak11/terraform-provider-xenorchestra/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "insecure": {
                "type": "boolean",
                "description": "Whether SSL should be verified or not\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Password for xoa api\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_PASSWORD"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "Hostname of the xoa router\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_URL"
                    ]
                }
            },
            "username": {
                "type": "string",
                "description": "User account for xoa api\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_USER"
                    ]
                }
            }
        },
        "defaults": [
            "password",
            "url",
            "username"
        ]
    },
    "types": {
        "xenorchestra:index/ResourceSetLimit:ResourceSetLimit": {
            "properties": {
                "quantity": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "quantity",
                "type"
            ]
        },
        "xenorchestra:index/VmCdrom:VmCdrom": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the ISO (VDI) to attach to the VM. This can be easily provided by using the `vdi` data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "xenorchestra:index/VmDisk:VmDisk": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameDescription": {
                    "type": "string",
                    "description": "A description for the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameLabel": {
                    "type": "string",
                    "description": "The name for the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "position": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size in bytes of the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srId": {
                    "type": "string",
                    "description": "The storage repository ID to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vbdId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdiId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nameLabel",
                "size",
                "srId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nameLabel",
                        "position",
                        "size",
                        "srId",
                        "vbdId",
                        "vdiId"
                    ]
                }
            }
        },
        "xenorchestra:index/VmNetwork:VmNetwork": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "device": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv4 addresses for the specific network interface. See the example below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv6 addresses for the specific network interface. See the example below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the network the VM will be on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "device",
                        "ipv4Addresses",
                        "ipv6Addresses",
                        "macAddress",
                        "networkId"
                    ]
                }
            }
        },
        "xenorchestra:index/getHostsHost:getHostsHost": {
            "properties": {
                "cpus": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryUsage": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "id",
                "memory",
                "memoryUsage",
                "nameLabel",
                "poolId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "xenorchestra:index/getVmsVm:getVmsVm": {
            "properties": {
                "affinityHost": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoPoweron": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blockedOperations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudConfig": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudNetworkConfig": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "coreOs": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuCap": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuWeight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpus": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/getVmsVmDisk:getVmsVmDisk"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expNestedHvm": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "highAvailability": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hvmBootFirmware": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memoryMax": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/getVmsVmNetwork:getVmsVmNetwork"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "powerState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceSet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startDelay": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vga": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "videoram": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitForIp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "disks",
                "id",
                "ipv4Addresses",
                "ipv6Addresses",
                "memoryMax",
                "nameLabel",
                "networks",
                "powerState",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "xenorchestra:index/getVmsVmDisk:getVmsVmDisk": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nameLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "position": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vbdId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vdiId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nameLabel",
                "position",
                "size",
                "srId",
                "vbdId",
                "vdiId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "xenorchestra:index/getVmsVmNetwork:getVmsVmNetwork": {
            "properties": {
                "attached": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "device": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "device",
                "ipv4Addresses",
                "ipv6Addresses",
                "macAddress",
                "networkId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the xenorchestra package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "insecure": {
                "type": "boolean",
                "description": "Whether SSL should be verified or not\n"
            },
            "password": {
                "type": "string",
                "description": "Password for xoa api\n"
            },
            "url": {
                "type": "string",
                "description": "Hostname of the xoa router\n"
            },
            "username": {
                "type": "string",
                "description": "User account for xoa api\n"
            }
        },
        "inputProperties": {
            "insecure": {
                "type": "boolean",
                "description": "Whether SSL should be verified or not\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Password for xoa api\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_PASSWORD"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "Hostname of the xoa router\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_URL"
                    ]
                }
            },
            "username": {
                "type": "string",
                "description": "User account for xoa api\n",
                "defaultInfo": {
                    "environment": [
                        "XOA_USER"
                    ]
                }
            }
        }
    },
    "resources": {
        "xenorchestra:index/acl:Acl": {
            "description": "## # xenorchestra.Acl\n\nCreates a Xen Orchestra ACL resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst pool = xenorchestra.getPool({\n    nameLabel: \"Your pool\",\n});\nconst user = xenorchestra.getUser({\n    username: \"my-username\",\n});\nconst acl = new xenorchestra.Acl(\"acl\", {\n    subject: user.then(user =\u003e user.id),\n    object: pool.then(pool =\u003e pool.id),\n    action: \"operator\",\n});\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\npool = xenorchestra.get_pool(name_label=\"Your pool\")\nuser = xenorchestra.get_user(username=\"my-username\")\nacl = xenorchestra.Acl(\"acl\",\n    subject=user.id,\n    object=pool.id,\n    action=\"operator\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pool = Xenorchestra.GetPool.Invoke(new()\n    {\n        NameLabel = \"Your pool\",\n    });\n\n    var user = Xenorchestra.GetUser.Invoke(new()\n    {\n        Username = \"my-username\",\n    });\n\n    var acl = new Xenorchestra.Acl(\"acl\", new()\n    {\n        Subject = user.Apply(getUserResult =\u003e getUserResult.Id),\n        Object = pool.Apply(getPoolResult =\u003e getPoolResult.Id),\n        Action = \"operator\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := xenorchestra.GetPool(ctx, \u0026GetPoolArgs{\n\t\t\tNameLabel: \"Your pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := xenorchestra.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"my-username\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewAcl(ctx, \"acl\", \u0026xenorchestra.AclArgs{\n\t\t\tSubject: pulumi.String(user.Id),\n\t\t\tObject:  pulumi.String(pool.Id),\n\t\t\tAction:  pulumi.String(\"operator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetPoolArgs;\nimport com.pulumi.xenorchestra.inputs.GetUserArgs;\nimport com.pulumi.xenorchestra.Acl;\nimport com.pulumi.xenorchestra.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pool = XenorchestraFunctions.getPool(GetPoolArgs.builder()\n            .nameLabel(\"Your pool\")\n            .build());\n\n        final var user = XenorchestraFunctions.getUser(GetUserArgs.builder()\n            .username(\"my-username\")\n            .build());\n\n        var acl = new Acl(\"acl\", AclArgs.builder()        \n            .subject(user.applyValue(getUserResult -\u003e getUserResult.id()))\n            .object(pool.applyValue(getPoolResult -\u003e getPoolResult.id()))\n            .action(\"operator\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acl:\n    type: xenorchestra:Acl\n    properties:\n      subject: ${user.id}\n      object: ${pool.id}\n      action: operator\nvariables:\n  pool:\n    Fn::Invoke:\n      Function: xenorchestra:getPool\n      Arguments:\n        nameLabel: Your pool\n  user:\n    Fn::Invoke:\n      Function: xenorchestra:getUser\n      Arguments:\n        username: my-username\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "action": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "object",
                "subject"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "object": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "subject": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "action",
                "object",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "object": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "subject": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "xenorchestra:index/cloudConfig:CloudConfig": {
            "description": "## # xenorchestra.CloudConfig\n\nCreates a Xen Orchestra cloud config resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst demo = new xenorchestra.CloudConfig(\"demo\", {template: `#cloud-config\n\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world'=========\" ]\n - ls -l /root\n`});\nconst bar = new xenorchestra.Vm(\"bar\", {cloudConfig: demo.template});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\ndemo = xenorchestra.CloudConfig(\"demo\", template=\"\"\"#cloud-config\n\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world'=========\" ]\n - ls -l /root\n\"\"\")\nbar = xenorchestra.Vm(\"bar\", cloud_config=demo.template)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Xenorchestra.CloudConfig(\"demo\", new()\n    {\n        Template = @\"#cloud-config\n\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"\"echo $(date) ': hello world!'\"\" ]\n - [ sh, -c, echo \"\"=========hello world'=========\"\" ]\n - ls -l /root\n\",\n    });\n\n    var bar = new Xenorchestra.Vm(\"bar\", new()\n    {\n        CloudConfig = demo.Template,\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := xenorchestra.NewCloudConfig(ctx, \"demo\", \u0026xenorchestra.CloudConfigArgs{\n\t\t\tTemplate: pulumi.String(fmt.Sprintf(`#cloud-config\n\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world'=========\" ]\n - ls -l /root\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"bar\", \u0026xenorchestra.VmArgs{\n\t\t\tCloudConfig: demo.Template,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.CloudConfig;\nimport com.pulumi.xenorchestra.CloudConfigArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new CloudConfig(\"demo\", CloudConfigArgs.builder()        \n            .template(\"\"\"\n#cloud-config\n\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world'=========\" ]\n - ls -l /root\n            \"\"\")\n            .build());\n\n        var bar = new Vm(\"bar\", VmArgs.builder()        \n            .cloudConfig(demo.template())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: xenorchestra:CloudConfig\n    properties:\n      template: |\n        #cloud-config\n\n        runcmd:\n         - [ ls, -l, / ]\n         - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n         - [ sh, -c, echo \"=========hello world'=========\" ]\n         - ls -l /root\n  bar:\n    type: xenorchestra:Vm\n    properties:\n      # ...\n      cloudConfig: ${demo.template}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "template"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudConfig resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "xenorchestra:index/resourceSet:ResourceSet": {
            "description": "## # xenorchestra.ResourceSet\n\nCreates a Xen Orchestra resource set\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst template = pulumi.output(xenorchestra.getTemplate({\n    nameLabel: \"Ubuntu Bionic Beaver 18.04\",\n}));\nconst sr = pulumi.output(xenorchestra.getSr({\n    nameLabel: \"Your storage repository label\",\n}));\nconst eth0 = pulumi.output(xenorchestra.getPif({\n    device: \"eth0\",\n    vlan: -1,\n}));\nconst rs = new xenorchestra.ResourceSet(\"rs\", {\n    limits: [\n        {\n            quantity: 20,\n            type: \"cpus\",\n        },\n        {\n            quantity: 107374182400,\n            type: \"disk\",\n        },\n        {\n            quantity: 12884901888,\n            type: \"memory\",\n        },\n    ],\n    objects: [\n        template.id,\n        sr.id,\n        eth0.network,\n    ],\n    subjects: [\"3b480e98-af4e-4dbf-9f1e-29ac59d6364f\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\ntemplate = xenorchestra.get_template(name_label=\"Ubuntu Bionic Beaver 18.04\")\nsr = xenorchestra.get_sr(name_label=\"Your storage repository label\")\neth0 = xenorchestra.get_pif(device=\"eth0\",\n    vlan=-1)\nrs = xenorchestra.ResourceSet(\"rs\",\n    limits=[\n        xenorchestra.ResourceSetLimitArgs(\n            quantity=20,\n            type=\"cpus\",\n        ),\n        xenorchestra.ResourceSetLimitArgs(\n            quantity=107374182400,\n            type=\"disk\",\n        ),\n        xenorchestra.ResourceSetLimitArgs(\n            quantity=12884901888,\n            type=\"memory\",\n        ),\n    ],\n    objects=[\n        template.id,\n        sr.id,\n        eth0.network,\n    ],\n    subjects=[\"3b480e98-af4e-4dbf-9f1e-29ac59d6364f\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var template = Xenorchestra.GetTemplate.Invoke(new()\n    {\n        NameLabel = \"Ubuntu Bionic Beaver 18.04\",\n    });\n\n    var sr = Xenorchestra.GetSr.Invoke(new()\n    {\n        NameLabel = \"Your storage repository label\",\n    });\n\n    var eth0 = Xenorchestra.GetPif.Invoke(new()\n    {\n        Device = \"eth0\",\n        Vlan = -1,\n    });\n\n    var rs = new Xenorchestra.ResourceSet(\"rs\", new()\n    {\n        Limits = new[]\n        {\n            new Xenorchestra.Inputs.ResourceSetLimitArgs\n            {\n                Quantity = 20,\n                Type = \"cpus\",\n            },\n            new Xenorchestra.Inputs.ResourceSetLimitArgs\n            {\n                Quantity = 107374182400,\n                Type = \"disk\",\n            },\n            new Xenorchestra.Inputs.ResourceSetLimitArgs\n            {\n                Quantity = 12884901888,\n                Type = \"memory\",\n            },\n        },\n        Objects = new[]\n        {\n            template.Apply(getTemplateResult =\u003e getTemplateResult.Id),\n            sr.Apply(getSrResult =\u003e getSrResult.Id),\n            eth0.Apply(getPifResult =\u003e getPifResult.Network),\n        },\n        Subjects = new[]\n        {\n            \"3b480e98-af4e-4dbf-9f1e-29ac59d6364f\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttemplate, err := xenorchestra.GetTemplate(ctx, \u0026GetTemplateArgs{\n\t\t\tNameLabel: \"Ubuntu Bionic Beaver 18.04\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsr, err := xenorchestra.GetSr(ctx, \u0026GetSrArgs{\n\t\t\tNameLabel: \"Your storage repository label\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\teth0, err := xenorchestra.GetPif(ctx, \u0026GetPifArgs{\n\t\t\tDevice: \"eth0\",\n\t\t\tVlan:   -1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewResourceSet(ctx, \"rs\", \u0026xenorchestra.ResourceSetArgs{\n\t\t\tLimits: ResourceSetLimitArray{\n\t\t\t\t\u0026ResourceSetLimitArgs{\n\t\t\t\t\tQuantity: pulumi.Int(20),\n\t\t\t\t\tType:     pulumi.String(\"cpus\"),\n\t\t\t\t},\n\t\t\t\t\u0026ResourceSetLimitArgs{\n\t\t\t\t\tQuantity: pulumi.Int(107374182400),\n\t\t\t\t\tType:     pulumi.String(\"disk\"),\n\t\t\t\t},\n\t\t\t\t\u0026ResourceSetLimitArgs{\n\t\t\t\t\tQuantity: pulumi.Int(12884901888),\n\t\t\t\t\tType:     pulumi.String(\"memory\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tObjects: pulumi.StringArray{\n\t\t\t\tpulumi.String(template.Id),\n\t\t\t\tpulumi.String(sr.Id),\n\t\t\t\tpulumi.String(eth0.Network),\n\t\t\t},\n\t\t\tSubjects: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"3b480e98-af4e-4dbf-9f1e-29ac59d6364f\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nResource sets can be imported using the id, e.g. bash\n\n```sh\n $ pulumi import xenorchestra:index/resourceSet:ResourceSet rs MGSpuwnbtUE\n```\n\n ",
            "properties": {
                "limits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/ResourceSetLimit:ResourceSetLimit"
                    }
                },
                "name": {
                    "type": "string"
                },
                "objects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "limits",
                "name"
            ],
            "inputProperties": {
                "limits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/ResourceSetLimit:ResourceSetLimit"
                    }
                },
                "name": {
                    "type": "string"
                },
                "objects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subjects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "limits"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceSet resources.\n",
                "properties": {
                    "limits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/xenorchestra:index/ResourceSetLimit:ResourceSetLimit"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "objects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "xenorchestra:index/vm:Vm": {
            "properties": {
                "affinityHost": {
                    "type": "string",
                    "description": "The preferred host you would like the VM to run on. If changed on an existing VM it will require a reboot for the VM to be rescheduled.\n"
                },
                "autoPoweron": {
                    "type": "boolean",
                    "description": "If the VM will automatically turn on. Defaults to `false`.\n"
                },
                "blockedOperations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of operations on a VM that are not permitted. Examples include: clean_reboot, clean_shutdown, hard_reboot, hard_shutdown, pause, shutdown, suspend, destroy. This can be used to prevent a VM from being destroyed. The entire list can be found here\n"
                },
                "cdrom": {
                    "$ref": "#/types/xenorchestra:index/VmCdrom:VmCdrom",
                    "description": "The ISO that should be attached to VM. This allows you to create a VM from a diskless template (any templates available from `xe template-list`) and install the OS from the following ISO.\n"
                },
                "cloudConfig": {
                    "type": "string",
                    "description": "The content of the cloud-init config to use\n"
                },
                "cloudNetworkConfig": {
                    "type": "string",
                    "description": "The content of the cloud-init network configuration for the VM (uses [version 1](https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html))\n"
                },
                "coreOs": {
                    "type": "boolean"
                },
                "cpuCap": {
                    "type": "integer"
                },
                "cpuWeight": {
                    "type": "integer"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of CPUs the VM will have. Updates to this field will cause a stop and start of the VM if the new CPU value is greater than the max CPU value. This can be determined with the following command:"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/VmDisk:VmDisk"
                    },
                    "description": "The disk the VM will have access to.\n"
                },
                "expNestedHvm": {
                    "type": "boolean",
                    "description": "Boolean parameter that allows a VM to use nested virtualization.\n"
                },
                "highAvailability": {
                    "type": "string",
                    "description": "The restart priority for the VM. Possible values are `best-effort`, `restart` and empty string (no restarts on failure. Defaults to empty string.\n"
                },
                "host": {
                    "type": "string"
                },
                "hvmBootFirmware": {
                    "type": "string",
                    "description": "The firmware to use for the VM. Possible values are `bios` and `uefi`. Defaults to empty string.\n"
                },
                "installationMethod": {
                    "type": "string",
                    "description": "This cannot be used with `cdrom`. Possible values are `network` which allows a VM to boot via PXE.\n"
                },
                "ipv4Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv4 addresses for the specific network interface. See the example below for more details.\n"
                },
                "ipv6Addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv6 addresses for the specific network interface. See the example below for more details.\n"
                },
                "memoryMax": {
                    "type": "integer",
                    "description": "The amount of memory in bytes the VM will have. Updates to this field will cause a stop and start of the VM if the new `memory_max` value is greater than the dynamic memory max. This can be determined with the following command:\n"
                },
                "nameDescription": {
                    "type": "string",
                    "description": "A description for the disk.\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "The name for the disk.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/VmNetwork:VmNetwork"
                    },
                    "description": "The network the VM will use\n"
                },
                "powerState": {
                    "type": "string",
                    "description": "the power state of the VM. This can be Running, Halted, Paused or Suspended.\n"
                },
                "resourceSet": {
                    "type": "string"
                },
                "startDelay": {
                    "type": "integer",
                    "description": "Number of seconds the VM should be delayed from starting\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels (strings) that are used to identify and organize resources. These are equivalent to Xenserver [tags](https://docs.citrix.com/en-us/xencenter/7-1/resources-tagging.html).\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID of the VM template to create the new VM from.\n"
                },
                "vga": {
                    "type": "string",
                    "description": "The video adapter the VM should use. Possible values include std and cirrus.\n"
                },
                "videoram": {
                    "type": "integer",
                    "description": "The videoram option the VM should use. Possible values include 1, 2, 4, 8, 16\n"
                },
                "waitForIp": {
                    "type": "boolean"
                }
            },
            "required": [
                "cpus",
                "disks",
                "ipv4Addresses",
                "ipv6Addresses",
                "memoryMax",
                "nameLabel",
                "networks",
                "powerState",
                "template"
            ],
            "inputProperties": {
                "affinityHost": {
                    "type": "string",
                    "description": "The preferred host you would like the VM to run on. If changed on an existing VM it will require a reboot for the VM to be rescheduled.\n"
                },
                "autoPoweron": {
                    "type": "boolean",
                    "description": "If the VM will automatically turn on. Defaults to `false`.\n"
                },
                "blockedOperations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of operations on a VM that are not permitted. Examples include: clean_reboot, clean_shutdown, hard_reboot, hard_shutdown, pause, shutdown, suspend, destroy. This can be used to prevent a VM from being destroyed. The entire list can be found here\n"
                },
                "cdrom": {
                    "$ref": "#/types/xenorchestra:index/VmCdrom:VmCdrom",
                    "description": "The ISO that should be attached to VM. This allows you to create a VM from a diskless template (any templates available from `xe template-list`) and install the OS from the following ISO.\n"
                },
                "cloudConfig": {
                    "type": "string",
                    "description": "The content of the cloud-init config to use\n"
                },
                "cloudNetworkConfig": {
                    "type": "string",
                    "description": "The content of the cloud-init network configuration for the VM (uses [version 1](https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html))\n"
                },
                "coreOs": {
                    "type": "boolean"
                },
                "cpuCap": {
                    "type": "integer"
                },
                "cpuWeight": {
                    "type": "integer"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of CPUs the VM will have. Updates to this field will cause a stop and start of the VM if the new CPU value is greater than the max CPU value. This can be determined with the following command:"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/VmDisk:VmDisk"
                    },
                    "description": "The disk the VM will have access to.\n"
                },
                "expNestedHvm": {
                    "type": "boolean",
                    "description": "Boolean parameter that allows a VM to use nested virtualization.\n"
                },
                "highAvailability": {
                    "type": "string",
                    "description": "The restart priority for the VM. Possible values are `best-effort`, `restart` and empty string (no restarts on failure. Defaults to empty string.\n"
                },
                "host": {
                    "type": "string"
                },
                "hvmBootFirmware": {
                    "type": "string",
                    "description": "The firmware to use for the VM. Possible values are `bios` and `uefi`. Defaults to empty string.\n"
                },
                "installationMethod": {
                    "type": "string",
                    "description": "This cannot be used with `cdrom`. Possible values are `network` which allows a VM to boot via PXE.\n"
                },
                "memoryMax": {
                    "type": "integer",
                    "description": "The amount of memory in bytes the VM will have. Updates to this field will cause a stop and start of the VM if the new `memory_max` value is greater than the dynamic memory max. This can be determined with the following command:\n"
                },
                "nameDescription": {
                    "type": "string",
                    "description": "A description for the disk.\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "The name for the disk.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/xenorchestra:index/VmNetwork:VmNetwork"
                    },
                    "description": "The network the VM will use\n"
                },
                "resourceSet": {
                    "type": "string"
                },
                "startDelay": {
                    "type": "integer",
                    "description": "Number of seconds the VM should be delayed from starting\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels (strings) that are used to identify and organize resources. These are equivalent to Xenserver [tags](https://docs.citrix.com/en-us/xencenter/7-1/resources-tagging.html).\n"
                },
                "template": {
                    "type": "string",
                    "description": "The ID of the VM template to create the new VM from.\n",
                    "willReplaceOnChanges": true
                },
                "vga": {
                    "type": "string",
                    "description": "The video adapter the VM should use. Possible values include std and cirrus.\n"
                },
                "videoram": {
                    "type": "integer",
                    "description": "The videoram option the VM should use. Possible values include 1, 2, 4, 8, 16\n"
                },
                "waitForIp": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "cpus",
                "disks",
                "memoryMax",
                "nameLabel",
                "networks",
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vm resources.\n",
                "properties": {
                    "affinityHost": {
                        "type": "string",
                        "description": "The preferred host you would like the VM to run on. If changed on an existing VM it will require a reboot for the VM to be rescheduled.\n"
                    },
                    "autoPoweron": {
                        "type": "boolean",
                        "description": "If the VM will automatically turn on. Defaults to `false`.\n"
                    },
                    "blockedOperations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of operations on a VM that are not permitted. Examples include: clean_reboot, clean_shutdown, hard_reboot, hard_shutdown, pause, shutdown, suspend, destroy. This can be used to prevent a VM from being destroyed. The entire list can be found here\n"
                    },
                    "cdrom": {
                        "$ref": "#/types/xenorchestra:index/VmCdrom:VmCdrom",
                        "description": "The ISO that should be attached to VM. This allows you to create a VM from a diskless template (any templates available from `xe template-list`) and install the OS from the following ISO.\n"
                    },
                    "cloudConfig": {
                        "type": "string",
                        "description": "The content of the cloud-init config to use\n"
                    },
                    "cloudNetworkConfig": {
                        "type": "string",
                        "description": "The content of the cloud-init network configuration for the VM (uses [version 1](https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html))\n"
                    },
                    "coreOs": {
                        "type": "boolean"
                    },
                    "cpuCap": {
                        "type": "integer"
                    },
                    "cpuWeight": {
                        "type": "integer"
                    },
                    "cpus": {
                        "type": "integer",
                        "description": "The number of CPUs the VM will have. Updates to this field will cause a stop and start of the VM if the new CPU value is greater than the max CPU value. This can be determined with the following command:"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/xenorchestra:index/VmDisk:VmDisk"
                        },
                        "description": "The disk the VM will have access to.\n"
                    },
                    "expNestedHvm": {
                        "type": "boolean",
                        "description": "Boolean parameter that allows a VM to use nested virtualization.\n"
                    },
                    "highAvailability": {
                        "type": "string",
                        "description": "The restart priority for the VM. Possible values are `best-effort`, `restart` and empty string (no restarts on failure. Defaults to empty string.\n"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hvmBootFirmware": {
                        "type": "string",
                        "description": "The firmware to use for the VM. Possible values are `bios` and `uefi`. Defaults to empty string.\n"
                    },
                    "installationMethod": {
                        "type": "string",
                        "description": "This cannot be used with `cdrom`. Possible values are `network` which allows a VM to boot via PXE.\n"
                    },
                    "ipv4Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv4 addresses for the specific network interface. See the example below for more details.\n"
                    },
                    "ipv6Addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv6 addresses for the specific network interface. See the example below for more details.\n"
                    },
                    "memoryMax": {
                        "type": "integer",
                        "description": "The amount of memory in bytes the VM will have. Updates to this field will cause a stop and start of the VM if the new `memory_max` value is greater than the dynamic memory max. This can be determined with the following command:\n"
                    },
                    "nameDescription": {
                        "type": "string",
                        "description": "A description for the disk.\n"
                    },
                    "nameLabel": {
                        "type": "string",
                        "description": "The name for the disk.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/xenorchestra:index/VmNetwork:VmNetwork"
                        },
                        "description": "The network the VM will use\n"
                    },
                    "powerState": {
                        "type": "string",
                        "description": "the power state of the VM. This can be Running, Halted, Paused or Suspended.\n"
                    },
                    "resourceSet": {
                        "type": "string"
                    },
                    "startDelay": {
                        "type": "integer",
                        "description": "Number of seconds the VM should be delayed from starting\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels (strings) that are used to identify and organize resources. These are equivalent to Xenserver [tags](https://docs.citrix.com/en-us/xencenter/7-1/resources-tagging.html).\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "The ID of the VM template to create the new VM from.\n",
                        "willReplaceOnChanges": true
                    },
                    "vga": {
                        "type": "string",
                        "description": "The video adapter the VM should use. Possible values include std and cirrus.\n"
                    },
                    "videoram": {
                        "type": "integer",
                        "description": "The videoram option the VM should use. Possible values include 1, 2, 4, 8, 16\n"
                    },
                    "waitForIp": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "xenorchestra:index/getCloudConfig:getCloudConfig": {
            "description": "## # xenorchestra.CloudConfig\n\nProvides information about cloud config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst cloudConfig = pulumi.output(xenorchestra.getCloudConfig({\n    name: \"Name of cloud config\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\ncloud_config = xenorchestra.get_cloud_config(name=\"Name of cloud config\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cloudConfig = Xenorchestra.GetCloudConfig.Invoke(new()\n    {\n        Name = \"Name of cloud config\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := xenorchestra.LookupCloudConfig(ctx, \u0026GetCloudConfigArgs{\n\t\t\tName: \"Name of cloud config\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetCloudConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cloudConfig = XenorchestraFunctions.getCloudConfig(GetCloudConfigArgs.builder()\n            .name(\"Name of cloud config\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  cloudConfig:\n    Fn::Invoke:\n      Function: xenorchestra:getCloudConfig\n      Arguments:\n        name: Name of cloud config\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudConfig.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "template": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "template",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getHost:getHost": {
            "description": "## # xenorchestra.getHost\n\nProvides information about a host.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst host1 = xenorchestra.getHost({\n    nameLabel: \"Your host\",\n});\nconst node = new xenorchestra.Vm(\"node\", {affinityHost: data.xenorchestra_host.ng6.id});\n//...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nhost1 = xenorchestra.get_host(name_label=\"Your host\")\nnode = xenorchestra.Vm(\"node\", affinity_host=data[\"xenorchestra_host\"][\"ng6\"][\"id\"])\n#...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var host1 = Xenorchestra.GetHost.Invoke(new()\n    {\n        NameLabel = \"Your host\",\n    });\n\n    var node = new Xenorchestra.Vm(\"node\", new()\n    {\n        AffinityHost = data.Xenorchestra_host.Ng6.Id,\n    });\n\n    //...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := xenorchestra.GetHost(ctx, \u0026GetHostArgs{\n\t\t\tNameLabel: \"Your host\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"node\", \u0026xenorchestra.VmArgs{\n\t\t\tAffinityHost: pulumi.Any(data.Xenorchestra_host.Ng6.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetHostArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var host1 = XenorchestraFunctions.getHost(GetHostArgs.builder()\n            .nameLabel(\"Your host\")\n            .build());\n\n        var node = new Vm(\"node\", VmArgs.builder()        \n            .affinityHost(data.xenorchestra_host().ng6().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node:\n    type: xenorchestra:Vm\n    properties:\n      # ...\n      affinityHost: ${data.xenorchestra_host.ng6.id}\nvariables:\n  host1:\n    Fn::Invoke:\n      Function: xenorchestra:getHost\n      Arguments:\n        nameLabel: Your host\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHost.\n",
                "properties": {
                    "nameLabel": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHost.\n",
                "properties": {
                    "cpus": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "memoryUsage": {
                        "type": "integer"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cpus",
                    "memory",
                    "memoryUsage",
                    "nameLabel",
                    "poolId",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getHosts:getHosts": {
            "description": "## # xenorchestra.getHosts\n\nUse this data source to filter Xenorchestra hosts by certain criteria (name_label, tags) for use in other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHosts.\n",
                "properties": {
                    "poolId": {
                        "type": "string"
                    },
                    "sortBy": {
                        "type": "string"
                    },
                    "sortOrder": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "poolId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHosts.\n",
                "properties": {
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/xenorchestra:index/getHostsHost:getHostsHost"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "master": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "sortBy": {
                        "type": "string"
                    },
                    "sortOrder": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "hosts",
                    "master",
                    "poolId",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getNetwork:getNetwork": {
            "description": "## # xenorchestra.getNetwork\n\nProvides information about a network of a Xenserver pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst net = xenorchestra.getNetwork({\n    nameLabel: \"Pool-wide network associated with eth0\",\n});\nconst demo_vm = new xenorchestra.Vm(\"demo-vm\", {networks: [{\n    networkId: net.then(net =\u003e net.id),\n}]});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nnet = xenorchestra.get_network(name_label=\"Pool-wide network associated with eth0\")\ndemo_vm = xenorchestra.Vm(\"demo-vm\", networks=[xenorchestra.VmNetworkArgs(\n    network_id=net.id,\n)])\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var net = Xenorchestra.GetNetwork.Invoke(new()\n    {\n        NameLabel = \"Pool-wide network associated with eth0\",\n    });\n\n    var demo_vm = new Xenorchestra.Vm(\"demo-vm\", new()\n    {\n        Networks = new[]\n        {\n            new Xenorchestra.Inputs.VmNetworkArgs\n            {\n                NetworkId = net.Apply(getNetworkResult =\u003e getNetworkResult.Id),\n            },\n        },\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnet, err := xenorchestra.GetNetwork(ctx, \u0026GetNetworkArgs{\n\t\t\tNameLabel: \"Pool-wide network associated with eth0\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"demo-vm\", \u0026xenorchestra.VmArgs{\n\t\t\tNetworks: VmNetworkArray{\n\t\t\t\t\u0026VmNetworkArgs{\n\t\t\t\t\tNetworkId: pulumi.String(net.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetNetworkArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport com.pulumi.xenorchestra.inputs.VmNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var net = XenorchestraFunctions.getNetwork(GetNetworkArgs.builder()\n            .nameLabel(\"Pool-wide network associated with eth0\")\n            .build());\n\n        var demo_vm = new Vm(\"demo-vm\", VmArgs.builder()        \n            .networks(VmNetworkArgs.builder()\n                .networkId(net.applyValue(getNetworkResult -\u003e getNetworkResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo-vm:\n    type: xenorchestra:Vm\n    properties:\n      # ...\n      networks:\n        - networkId: ${net.id}\nvariables:\n  net:\n    Fn::Invoke:\n      Function: xenorchestra:getNetwork\n      Arguments:\n        nameLabel: Pool-wide network associated with eth0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "bridge": {
                        "type": "string"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "bridge": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bridge",
                    "nameLabel",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getPif:getPif": {
            "description": "## # xenorchestra.getPif\n\nProvides information about a physical network interface (PIF) of a XenServer host specified by the interface name or whether it is the management interface.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst eth0 = xenorchestra.getPif({\n    device: \"eth0\",\n    vlan: -1,\n});\nconst demo_vm = new xenorchestra.Vm(\"demo-vm\", {networks: [{\n    networkId: eth0.then(eth0 =\u003e eth0.network),\n}]});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\neth0 = xenorchestra.get_pif(device=\"eth0\",\n    vlan=-1)\ndemo_vm = xenorchestra.Vm(\"demo-vm\", networks=[xenorchestra.VmNetworkArgs(\n    network_id=eth0.network,\n)])\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var eth0 = Xenorchestra.GetPif.Invoke(new()\n    {\n        Device = \"eth0\",\n        Vlan = -1,\n    });\n\n    var demo_vm = new Xenorchestra.Vm(\"demo-vm\", new()\n    {\n        Networks = new[]\n        {\n            new Xenorchestra.Inputs.VmNetworkArgs\n            {\n                NetworkId = eth0.Apply(getPifResult =\u003e getPifResult.Network),\n            },\n        },\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\teth0, err := xenorchestra.GetPif(ctx, \u0026GetPifArgs{\n\t\t\tDevice: \"eth0\",\n\t\t\tVlan:   -1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"demo-vm\", \u0026xenorchestra.VmArgs{\n\t\t\tNetworks: VmNetworkArray{\n\t\t\t\t\u0026VmNetworkArgs{\n\t\t\t\t\tNetworkId: pulumi.String(eth0.Network),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPif.\n",
                "properties": {
                    "device": {
                        "type": "string"
                    },
                    "hostId": {
                        "type": "string"
                    },
                    "vlan": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "device",
                    "vlan"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPif.\n",
                "properties": {
                    "attached": {
                        "type": "boolean"
                    },
                    "device": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "hostId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "network": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "vlan": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "attached",
                    "device",
                    "host",
                    "hostId",
                    "network",
                    "poolId",
                    "uuid",
                    "vlan",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getPool:getPool": {
            "description": "## # xenorchestra.getPool\n\nProvides information about a pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst pool = xenorchestra.getPool({\n    nameLabel: \"Your pool\",\n});\nconst localStorage = pool.then(pool =\u003e xenorchestra.getSr({\n    nameLabel: \"Your storage repository label\",\n    poolId: pool.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\npool = xenorchestra.get_pool(name_label=\"Your pool\")\nlocal_storage = xenorchestra.get_sr(name_label=\"Your storage repository label\",\n    pool_id=pool.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pool = Xenorchestra.GetPool.Invoke(new()\n    {\n        NameLabel = \"Your pool\",\n    });\n\n    var localStorage = Xenorchestra.GetSr.Invoke(new()\n    {\n        NameLabel = \"Your storage repository label\",\n        PoolId = pool.Apply(getPoolResult =\u003e getPoolResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := xenorchestra.GetPool(ctx, \u0026GetPoolArgs{\n\t\t\tNameLabel: \"Your pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.GetSr(ctx, \u0026GetSrArgs{\n\t\t\tNameLabel: \"Your storage repository label\",\n\t\t\tPoolId:    pulumi.StringRef(pool.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetPoolArgs;\nimport com.pulumi.xenorchestra.inputs.GetSrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pool = XenorchestraFunctions.getPool(GetPoolArgs.builder()\n            .nameLabel(\"Your pool\")\n            .build());\n\n        final var localStorage = XenorchestraFunctions.getSr(GetSrArgs.builder()\n            .nameLabel(\"Your storage repository label\")\n            .poolId(pool.applyValue(getPoolResult -\u003e getPoolResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  pool:\n    Fn::Invoke:\n      Function: xenorchestra:getPool\n      Arguments:\n        nameLabel: Your pool\n  localStorage:\n    Fn::Invoke:\n      Function: xenorchestra:getSr\n      Arguments:\n        nameLabel: Your storage repository label\n        poolId: ${pool.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "nameLabel": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "cpus": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "master": {
                        "type": "string"
                    },
                    "nameLabel": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cpus",
                    "description",
                    "master",
                    "nameLabel",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getResourceSet:getResourceSet": {
            "description": "## # xenorchestra.ResourceSet\n\nProvides information about a resource set.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst rs = pulumi.output(xenorchestra.getResourceSet({\n    name: \"my resource set\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nrs = xenorchestra.get_resource_set(name=\"my resource set\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rs = Xenorchestra.GetResourceSet.Invoke(new()\n    {\n        Name = \"my resource set\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := xenorchestra.LookupResourceSet(ctx, \u0026GetResourceSetArgs{\n\t\t\tName: \"my resource set\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetResourceSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rs = XenorchestraFunctions.getResourceSet(GetResourceSetArgs.builder()\n            .name(\"my resource set\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  rs:\n    Fn::Invoke:\n      Function: xenorchestra:getResourceSet\n      Arguments:\n        name: my resource set\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceSet.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getResourceSet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getSr:getSr": {
            "description": "## # xenorchestra.getSr\n\nProvides information about a Storage repository to ease the lookup of VM storage information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst localStorage = xenorchestra.getSr({\n    nameLabel: \"Your storage repository label\",\n});\nconst demo_vm = new xenorchestra.Vm(\"demo-vm\", {disks: [{\n    srId: localStorage.then(localStorage =\u003e localStorage.id),\n    nameLabel: \"Ubuntu Bionic Beaver 18.04_imavo\",\n    size: 32212254720,\n}]});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nlocal_storage = xenorchestra.get_sr(name_label=\"Your storage repository label\")\ndemo_vm = xenorchestra.Vm(\"demo-vm\", disks=[xenorchestra.VmDiskArgs(\n    sr_id=local_storage.id,\n    name_label=\"Ubuntu Bionic Beaver 18.04_imavo\",\n    size=32212254720,\n)])\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var localStorage = Xenorchestra.GetSr.Invoke(new()\n    {\n        NameLabel = \"Your storage repository label\",\n    });\n\n    var demo_vm = new Xenorchestra.Vm(\"demo-vm\", new()\n    {\n        Disks = new[]\n        {\n            new Xenorchestra.Inputs.VmDiskArgs\n            {\n                SrId = localStorage.Apply(getSrResult =\u003e getSrResult.Id),\n                NameLabel = \"Ubuntu Bionic Beaver 18.04_imavo\",\n                Size = 32212254720,\n            },\n        },\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocalStorage, err := xenorchestra.GetSr(ctx, \u0026GetSrArgs{\n\t\t\tNameLabel: \"Your storage repository label\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"demo-vm\", \u0026xenorchestra.VmArgs{\n\t\t\tDisks: VmDiskArray{\n\t\t\t\t\u0026VmDiskArgs{\n\t\t\t\t\tSrId:      pulumi.String(localStorage.Id),\n\t\t\t\t\tNameLabel: pulumi.String(\"Ubuntu Bionic Beaver 18.04_imavo\"),\n\t\t\t\t\tSize:      pulumi.Int(32212254720),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetSrArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport com.pulumi.xenorchestra.inputs.VmDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var localStorage = XenorchestraFunctions.getSr(GetSrArgs.builder()\n            .nameLabel(\"Your storage repository label\")\n            .build());\n\n        var demo_vm = new Vm(\"demo-vm\", VmArgs.builder()        \n            .disks(VmDiskArgs.builder()\n                .srId(localStorage.applyValue(getSrResult -\u003e getSrResult.id()))\n                .nameLabel(\"Ubuntu Bionic Beaver 18.04_imavo\")\n                .size(32212254720)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo-vm:\n    type: xenorchestra:Vm\n    properties:\n      # ...\n      disks:\n        - srId: ${localStorage.id}\n          nameLabel: Ubuntu Bionic Beaver 18.04_imavo\n          size: 3.221225472e+10\nvariables:\n  localStorage:\n    Fn::Invoke:\n      Function: xenorchestra:getSr\n      Arguments:\n        nameLabel: Your storage repository label\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSr.\n",
                "properties": {
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSr.\n",
                "properties": {
                    "container": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "physicalUsage": {
                        "type": "integer"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "srType": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "usage": {
                        "type": "integer"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "container",
                    "nameLabel",
                    "physicalUsage",
                    "size",
                    "srType",
                    "usage",
                    "uuid",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getTemplate:getTemplate": {
            "description": "## # xenorchestra.getTemplate\n\nProvides information about a VM template that can be used for creating new VMs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst template = xenorchestra.getTemplate({\n    nameLabel: \"Ubuntu Bionic Beaver 18.04\",\n});\nconst demo_vm = new xenorchestra.Vm(\"demo-vm\", {template: template.then(template =\u003e template.id)});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\ntemplate = xenorchestra.get_template(name_label=\"Ubuntu Bionic Beaver 18.04\")\ndemo_vm = xenorchestra.Vm(\"demo-vm\", template=template.id)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var template = Xenorchestra.GetTemplate.Invoke(new()\n    {\n        NameLabel = \"Ubuntu Bionic Beaver 18.04\",\n    });\n\n    var demo_vm = new Xenorchestra.Vm(\"demo-vm\", new()\n    {\n        Template = template.Apply(getTemplateResult =\u003e getTemplateResult.Id),\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttemplate, err := xenorchestra.GetTemplate(ctx, \u0026GetTemplateArgs{\n\t\t\tNameLabel: \"Ubuntu Bionic Beaver 18.04\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"demo-vm\", \u0026xenorchestra.VmArgs{\n\t\t\tTemplate: pulumi.String(template.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetTemplateArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var template = XenorchestraFunctions.getTemplate(GetTemplateArgs.builder()\n            .nameLabel(\"Ubuntu Bionic Beaver 18.04\")\n            .build());\n\n        var demo_vm = new Vm(\"demo-vm\", VmArgs.builder()        \n            .template(template.applyValue(getTemplateResult -\u003e getTemplateResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo-vm:\n    type: xenorchestra:Vm\n    properties:\n      # ...\n      template: ${template.id}\nvariables:\n  template:\n    Fn::Invoke:\n      Function: xenorchestra:getTemplate\n      Arguments:\n        nameLabel: Ubuntu Bionic Beaver 18.04\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplate.\n",
                "properties": {
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTemplate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel",
                    "uuid",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getUser:getUser": {
            "description": "## # xenorchestra.getUser\n\nProvides information about a Xen Orchestra user. If the Xen Orchestra user account you are using is not an admin, see the `search_in_session` parameter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst user = pulumi.output(xenorchestra.getUser({\n    username: \"my-username\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nuser = xenorchestra.get_user(username=\"my-username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = Xenorchestra.GetUser.Invoke(new()\n    {\n        Username = \"my-username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := xenorchestra.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"my-username\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var user = XenorchestraFunctions.getUser(GetUserArgs.builder()\n            .username(\"my-username\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  user:\n    Fn::Invoke:\n      Function: xenorchestra:getUser\n      Arguments:\n        username: my-username\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "searchInSession": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "searchInSession": {
                        "type": "boolean"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getVdi:getVdi": {
            "description": "## # xenorchestra.getVdi\n\nProvides information about a VDI (virtual disk image)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as xenorchestra from \"@pulumi/xenorchestra\";\n\nconst vdi = xenorchestra.getVdi({\n    nameLabel: \"ubuntu-20.04.4-live-server-amd64.iso\",\n});\nconst demo_vm = new xenorchestra.Vm(\"demo-vm\", {cdrom: vdi.then(vdi =\u003e vdi.id)});\n```\n```python\nimport pulumi\nimport pulumi_xenorchestra as xenorchestra\n\nvdi = xenorchestra.get_vdi(name_label=\"ubuntu-20.04.4-live-server-amd64.iso\")\ndemo_vm = xenorchestra.Vm(\"demo-vm\", cdrom=vdi.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Xenorchestra = Pulumi.Xenorchestra;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vdi = Xenorchestra.GetVdi.Invoke(new()\n    {\n        NameLabel = \"ubuntu-20.04.4-live-server-amd64.iso\",\n    });\n\n    var demo_vm = new Xenorchestra.Vm(\"demo-vm\", new()\n    {\n        Cdrom = vdi.Apply(getVdiResult =\u003e getVdiResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-xenorchestra/sdk/go/xenorchestra\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvdi, err := xenorchestra.GetVdi(ctx, \u0026GetVdiArgs{\n\t\t\tNameLabel: \"ubuntu-20.04.4-live-server-amd64.iso\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = xenorchestra.NewVm(ctx, \"demo-vm\", \u0026xenorchestra.VmArgs{\n\t\t\tCdrom: pulumi.String(vdi.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.xenorchestra.XenorchestraFunctions;\nimport com.pulumi.xenorchestra.inputs.GetVdiArgs;\nimport com.pulumi.xenorchestra.Vm;\nimport com.pulumi.xenorchestra.VmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vdi = XenorchestraFunctions.getVdi(GetVdiArgs.builder()\n            .nameLabel(\"ubuntu-20.04.4-live-server-amd64.iso\")\n            .build());\n\n        var demo_vm = new Vm(\"demo-vm\", VmArgs.builder()        \n            .cdrom(vdi.applyValue(getVdiResult -\u003e getVdiResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo-vm:\n    type: xenorchestra:Vm\n    properties:\n      cdrom: ${vdi.id}\nvariables:\n  vdi:\n    Fn::Invoke:\n      Function: xenorchestra:getVdi\n      Arguments:\n        nameLabel: ubuntu-20.04.4-live-server-amd64.iso\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVdi.\n",
                "properties": {
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVdi.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameLabel": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nameLabel",
                    "id"
                ]
            }
        },
        "xenorchestra:index/getVms:getVms": {
            "description": "## # xenorchestra.getVms\n\nUse this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVms.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "powerState": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "poolId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVms.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "poolId": {
                        "type": "string"
                    },
                    "powerState": {
                        "type": "string"
                    },
                    "vms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/xenorchestra:index/getVmsVm:getVmsVm"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "poolId",
                    "vms",
                    "id"
                ]
            }
        }
    }
}